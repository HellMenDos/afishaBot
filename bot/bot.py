import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import aiogram.utils.markdown as fmt
import asyncio
import requests
from requests.api import post
from requests.models import Response, codes


class Game(StatesGroup):
    question = State()
    photo = State()
    typesOfPosts = State()
    human = State()
    postType = State()


async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start",
                         description="–ì–ª–∞–≤–Ω–∞—è"),
        types.BotCommand(command="/search", description="–ü–æ–∏—Å–∫ üîç"),
        types.BotCommand(command="/tooday",
                         description="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòÑ"),
        types.BotCommand(command="/tomorrow",
                         description="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚åöÔ∏è"),
        types.BotCommand(command="/game",
                         description="–ò–≥—Ä–∞ üé≤ "),
        types.BotCommand(command="/profile", description="–ü—Ä–æ—Ñ–∏–ª—å ü§ñ "),
    ]
    await bot.set_my_commands(commands)


async def main():

    botInit = Bot(token='1921418522:AAGhuuELsBbOeby0OcjyjlGO5lqAbypl30c')
    bot = Dispatcher(botInit, storage=MemoryStorage())

    # Start chat
    @bot.message_handler(commands="start")
    async def start(message: types.Message):
        response = requests.get(
            'https://telegramexpert.ru/api/user/check/{0}'.format(message.chat.id))

        if response.json()['have']:
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
        else:
            markup = types.ReplyKeyboardMarkup(True, True)
            cities = requests.get(
                'https://telegramexpert.ru/api/city/get/').json()
            for i in range(0, len(cities)):
                markup.add(types.KeyboardButton(cities[i]['name']))
            markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–µ'))

            title = '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥'

        await message.answer(title, reply_markup=markup)
    userId = 0

    @bot.message_handler()
    async def send_text(message: types.Message, state: FSMContext):
        if message.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—å ü§ñ' or message.text == '/profile':
            cities = requests.get(
                'https://telegramexpert.ru/api/user/get/{0}'.format(str(message.chat.id))).json()
            idols = requests.get(
                'https://telegramexpert.ru/api/user/idols/get/{0}'.format(cities['id'])).json()
            if idols:
                idols = ', '.join(idols)
            else:
                idols = ' –£ –≤–∞—Å –Ω–µ—Ç –∫—É–º–∏—Ä–æ–≤'

            textAbout = "<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <u>{0}</u>\n–í–∞—à –≥–æ—Ä–æ–¥: <u>{1}</u>\n–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: <u>{2}</u>\n \n–ö—É–º–∏—Ä—ã: {3} \n\n <a href='https://t.me/KulikovVladimir'>¬´–ù–∞–ø–∏—Å–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É¬ª</a>".format(
                cities["token"], cities["location"]["name"], cities["points"], idols)
            markup = types.ReplyKeyboardMarkup(True, True)
            changeLocation = types.KeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥')
            setIdols = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫—É–º–∏—Ä–æ–≤')
            markup.add(changeLocation, setIdols)
            await message.answer(textAbout, parse_mode=types.ParseMode.HTML, reply_markup=markup, disable_web_page_preview=True)

        if message.text.lower() == '–≤—ã–±—Ä–∞—Ç—å –∫—É–º–∏—Ä–æ–≤':
            cities = requests.get(
                'https://telegramexpert.ru/api/human/get/').json()
            markup = types.ReplyKeyboardMarkup(True, True)
            markup.add(types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫'))
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            for i in range(0, len(cities)):
                markup.add(types.KeyboardButton(cities[i]['name']))
            title = '–í—ã–±–µ—Ä–∏ –∫—É–º–∏—Ä–æ–≤'
            await message.answer(title, reply_markup=markup)
            await Game.human.set()

        if message.text.lower() == '–ø–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥':
            cities = requests.get(
                'https://telegramexpert.ru/api/city/get/').json()
            markup = types.ReplyKeyboardMarkup(True, True)
            for i in range(0, len(cities)):
                markup.add(types.KeyboardButton(cities[i]['name']))
            markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–µ'))

            title = '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥'
            await message.answer(title, reply_markup=markup)

        cities = requests.get('https://telegramexpert.ru/api/city/get/').json()
        for i in range(0, len(cities)):
            if message.text.lower() == cities[i]['name']:
                create = requests.post(
                    'https://telegramexpert.ru/api/user/reg/', json={"token": message.chat.id, "city": message.text})

                markup = types.ReplyKeyboardMarkup(True, True)
                search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
                game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
                setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
                markup.add(search, game, setting)

                await message.answer('–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?', reply_markup=markup)

        if message.text.lower() == '–Ω–∞–∑–∞–¥' or message.text.lower() == '–Ω–∞ –≥–ª–∞–≤–Ω—É—é':
            create = requests.post(
                'https://telegramexpert.ru/api/user/reg/', json={'token': message.chat.id, 'city': message.text})

            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            markup.add(search, game, setting)

            await message.answer('–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?', reply_markup=markup)

        if message.text.lower() == '–¥—Ä—É–≥–æ–µ':
            cities = requests.get(
                'https://telegramexpert.ru/api/city/get/').json()
            cityText = ''
            markup = types.ReplyKeyboardMarkup(True, True)
            for i in range(0, len(cities)):
                if i == (len(cities)-2):
                    cityText += cities[i]['name'] + ' –∏ '
                else:
                    cityText += cities[i]['name'] + ' , '
                markup.add(types.KeyboardButton(cities[i]['name']))
            markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–µ'))
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –ø–æ–∫–∞ –∏—â—É —Ç–æ–ª—å–∫–æ –≤ {} –Ω–æ —ç—Ç–æ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ. –ù–∞–ø–∏—à–∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞ –∏ —è —É–≤–µ–¥–æ–º–ª—é, –∫–æ–≥–¥–∞ —Å–º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å.'.format(
                cityText), reply_markup=markup)

        if message.text.lower() == '–∏–≥—Ä–∞ üé≤' or message.text == '/game':
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ò–≥—Ä–∞–£–≥–∞–¥–∞–π–ö–æ–º–∏–∫–∞'))
            markup = types.ReplyKeyboardMarkup(True, True)
            photo = types.KeyboardButton('–£–≥–∞–¥–∞–π –∫–æ–º–∏–∫–∞ –ø–æ —Ñ–æ—Ç–∫–µ')
            joke = types.KeyboardButton('–£–≥–∞–¥–∞–π –∫–æ–º–∏–∫–∞ –ø–æ —à—É—Ç–∫–µ')

            markup.add(photo, joke)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å', reply_markup=markup)

        if message.text.lower() == '—É–≥–∞–¥–∞–π –∫–æ–º–∏–∫–∞ –ø–æ —à—É—Ç–∫–µ':
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–£–≥–∞–¥–∞–π–ü–æ–®—É—Ç–∫–µ'))
            startGame = requests.get(
                'https://telegramexpert.ru/api/action/create/{0}/0/'.format(message.chat.id)).json()
            markup = types.ReplyKeyboardMarkup(True, True)
            back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
            markup.add(back)
            await message.answer(startGame['question']['question'], reply_markup=markup)
            await Game.question.set()

        if message.text.lower() == '—É–≥–∞–¥–∞–π –∫–æ–º–∏–∫–∞ –ø–æ —Ñ–æ—Ç–∫–µ':
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–£–≥–∞–¥–∞–π–ü–æ–§–æ—Ç–∫–µ'))
            startGame = requests.get(
                'https://telegramexpert.ru/api/action/create/{0}/1/'.format(message.chat.id)).json()
            markup = types.ReplyKeyboardMarkup(True, True)
            back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
            markup.add(back)
            await message.answer(
                f"{fmt.hide_link(startGame['question']['photo'])} –ö—Ç–æ —ç—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ?",
                parse_mode=types.ParseMode.HTML, reply_markup=markup)
            await Game.photo.set()
        # if message.text.lower() == '–ü–æ–∏—Å–∫ üîç':
        #     typesOfPost = requests.get(
        #         'https://telegramexpert.ru/api/types/get/').json()
        #     markup = types.ReplyKeyboardMarkup(True, True)
        #     for i in range(0, len(typesOfPost)):
        #         markup.add(types.KeyboardButton(typesOfPost[i]['name']))
        #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=markup)

        if message.text.lower()[0:2] == '/i':
            requests.get('https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(
                message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–ù–∞–ü–æ—Å—Ç–ù–æ–º–µ—Ä{0}'.format(message.text.lower()[2:])))
            post = requests.get(
                'https://telegramexpert.ru/api/post/one/{0}'.format(message.text.lower()[2:])).json()
            markup = types.InlineKeyboardMarkup(True, True)
            if post['link']:
                link = types.InlineKeyboardButton(
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É', url=post['link'])
                markup.add(link)
            if post['linkForChat']:
                linkForChat = types.InlineKeyboardButton(
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç', url=post['linkForChat'])
                markup.add(linkForChat)
            if post['linkRegistr']:
                linkRegistr = types.InlineKeyboardButton(
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', url=post['linkRegistr'])
                markup.add(linkRegistr)

            photo = ''
            if post['photo']:
                photo = fmt.hide_link(post['photo'])

            humans = ''
            for k in range(0, len(post['human'])):
                humans += '{0}'.format(post['human'][k]['name'])
                if not k == (len(post['human']) - 1):
                    humans += ', '

            if post['costType'] == 0:
                cost = str(post['cost']) + \
                    ' —Ä.' if post['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
            elif post['costType'] == 1:
                cost = '–î–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ' + \
                    str(post['cost']) + \
                    ' —Ä.' if post['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
            elif post['costType'] == 2:
                cost = f"–î–æ–Ω–∞—Ç (–ª—é–±–∞—è –∫—É–ø—é—Ä–∞ –º–∏–Ω: {post['cost']} —Ä.) "

            await message.answer(
                f"{photo}"
                f"<b>{post['title']}</b> \n\n"
                f"{post['describe']} \n"
                f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {post['location']} \n\n"
                f"–ù–∞—á–∞–ª–æ:  <u>{post['timeStart'].split('T')[0]} - {post['timeStart'].split('T')[1][:-1]}</u>\n"
                f"–í—Ö–æ–¥:  <u>{post['timeEnd'].split('T')[0]} - {post['timeEnd'].split('T')[1][:-1]}</u>\n\n"
                f"–í—ã—Å—Ç—É–ø–∞–µ—Ç: {humans} \n"
                f"–¶–µ–Ω–∞: {cost} \n",
                parse_mode=types.ParseMode.HTML, reply_markup=markup)

        if message.text.lower() == '–ø–æ–∏—Å–∫ üîç' or message.text == '/search':
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ü–æ–∏—Å–∫–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
            markup = types.ReplyKeyboardMarkup(True, True)
            count = requests.get(
                'https://telegramexpert.ru/api/posts/count/').json()

            tooday = types.KeyboardButton(f'–°–µ–≥–æ–¥–Ω—è({count["tooday"]})')
            toomorrow = types.KeyboardButton(f'–ó–∞–≤—Ç—Ä–∞({count["tomorrow"]})')
            inWeek = types.KeyboardButton(f'–ù–µ–¥–µ–ª—è({count["week"]})')
            top = types.KeyboardButton(f'–¢–æ–ø ({count["best"]}) üîù')
            location = types.KeyboardButton('–ü–æ –≥–µ–æ')
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(tooday, toomorrow, inWeek, top, location, back)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å', reply_markup=markup)
            await Game.typesOfPosts.set()

        if message.text == '/tooday' or message.text == '/tomorrow':
            index = 1 if message.text == '/tomorrow' else 0
            print(index)
            markup = types.ReplyKeyboardMarkup(True, True)
            main = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
            markup.add(main)

            resp = requests.get(
                'https://telegramexpert.ru/api/post/types/{0}'.format(index)).json()
            if resp:

                paidText = ''
                freeText = ''
                depositText = ''
                donationText = ''
                for i in range(0, len(resp)):
                    if resp[i]['cost'] == 0:
                        freeText = freeText + \
                            f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                    else:
                        if resp[i]['costType'] == 0:
                            paidText = paidText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                        if resp[i]['costType'] == 1:
                            depositText = depositText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - –î–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                        if resp[i]['costType'] == 2:
                            donationText = donationText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - –î–æ–Ω–∞—Ç (–ª—é–±–∞—è –∫—É–ø—é—Ä–∞ –º–∏–Ω: {resp[i]['cost']} —Ä.) (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"

                if not paidText:
                    paidText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not freeText:
                    freeText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not depositText:
                    depositText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not donationText:
                    donationText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

                mainTitle = f'<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> \n\n <u>–ü–ª–∞—Ç–Ω–æ:</u> \n {paidText} \n\n <u>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:</u> \n {freeText} \n\n <u>–î–µ–ø–æ–∑–∏—Ç:</u> \n {depositText} \n\n <u>–î–æ–Ω–∞—Ç—ã:</u> \n {donationText}'

                await message.answer(mainTitle, parse_mode=types.ParseMode.HTML, reply_markup=markup, disable_web_page_preview=True)
            else:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –ø–æ–∫–∞ —Ç–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç', reply_markup=markup)

    @bot.message_handler(state=Game.question)
    async def send_text(message: types.Message, state: FSMContext):
        if not message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            getHuman = requests.get(
                'https://telegramexpert.ru/api/action/get/{0}'.format(message.chat.id)).json()
            if message.text.lower() == getHuman["question"]["human"]["name"].lower():
                requests.get('https://telegramexpert.ru/api/user/add/points/{0}/{1}'.format(
                    message.chat.id, getHuman["question"]["points"]))

                await message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–æ {0} –æ—á–∫–æ–≤'.format(
                    getHuman["question"]["points"]))

                startGame = requests.get(
                    'https://telegramexpert.ru/api/action/create/{0}/0/'.format(message.chat.id)).json()
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)
                await message.answer(startGame["question"]["question"], reply_markup=markup)

            elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                startGame = requests.get(
                    'https://telegramexpert.ru/api/action/create/{0}/0/'.format(message.chat.id)).json()
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)
                await message.answer(startGame["question"]["question"], reply_markup=markup)

            else:
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ', reply_markup=markup)

        else:
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)

    @bot.message_handler(state=Game.photo)
    async def send_text(message: types.Message, state: FSMContext):
        if not message.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é':
            getHuman = requests.get(
                'https://telegramexpert.ru/api/action/get/{0}'.format(message.chat.id)).json()
            if message.text.lower() == getHuman["question"]["human"]["name"].lower():
                requests.get('https://telegramexpert.ru/api/user/add/points/{0}/{1}'.format(
                    message.chat.id, getHuman["question"]["points"]))

                await message.answer('–ü—Ä–∞–∞–≤–∏–ª—å–Ω–æ, –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—á–∏—Å–ª–µ–Ω–æ {0} –æ—á–∫–æ–≤'.format(
                    getHuman["question"]["points"]))

                startGame = requests.get(
                    'https://telegramexpert.ru/api/action/create/{0}/1/'.format(message.chat.id)).json()
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)

                await message.answer(
                    f"{fmt.hide_link(startGame['question']['photo'])} –ö—Ç–æ —ç—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ?",
                    parse_mode=types.ParseMode.HTML, reply_markup=markup)
            elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                startGame = requests.get(
                    'https://telegramexpert.ru/api/action/create/{0}/1/'.format(message.chat.id)).json()
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)

                await message.answer(
                    f"{fmt.hide_link(startGame['question']['photo'])} –ö—Ç–æ —ç—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ?",
                    parse_mode=types.ParseMode.HTML, reply_markup=markup)
            else:
                markup = types.ReplyKeyboardMarkup(True, True)
                back = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
                skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
                markup.add(back, skip)
                await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ', reply_markup=markup)

        else:
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)

    @bot.message_handler(state=Game.typesOfPosts)
    async def send_text(message, state: FSMContext):

        if '–°–µ–≥–æ–¥–Ω—è' in message.text:
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–°–µ–≥–æ–¥–Ω—è'))
            await state.update_data(postType=0)
        elif '–ó–∞–≤—Ç—Ä–∞' in message.text:
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ó–∞–≤—Ç—Ä–∞'))
            await state.update_data(postType=1)
        elif '–ù–∞ –Ω–µ–¥–µ–ª–µ' in message.text:
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ù–∞–≠—Ç–æ–π–ù–µ–¥–µ–ª–µ'))
            await state.update_data(postType=2)
        elif '–¢–æ–ø' in message.text:
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–¢–æ–ø'))
            await state.update_data(postType=3)
        elif '–ü–æ –≥–µ–æ' in message.text:
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è'))
            await state.update_data(postType=0)
        elif '/profile' in message.text or '/search' in message.text or '/tooday' in message.text or '/tomorrow' in message.text or '/game' in message.text or '/start' in message.text:
            await message.answer('–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥')
        elif message.text.lower() == '–Ω–∞–∑–∞–¥':
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)

        current_state = await state.get_data()
        resp = requests.get(
            'https://telegramexpert.ru/api/post/types/{0}'.format(current_state.get('postType'))).json()

        # if message.text.lower() == '–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ' or message.text.lower() == '–ø–ª–∞—Ç–Ω—ã–µ' or message.text.lower() == '–Ω–∞–∑–∞–¥':
        #     # {fmt.hide_link('https://telegramexpert.ru{0}'.format(resp[0]['photo']))}
        #     markup = types.ReplyKeyboardMarkup(True, True)
        #     main = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
        #     markup.add(main)

        #     if resp:
        #         title = '<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> \n'
        #         for i in range(0, len(resp)):
        #             title = title + \
        #                 f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (/i{resp[i]['id']})"
        #         await message.answer(title, parse_mode=types.ParseMode.HTML, reply_markup=markup)
        #     else:
        #         await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –ø–æ–∫–∞ —Ç–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç', reply_markup=markup)
        if message.text.lower()[0:2] == '/i':
            requests.get(
                'https://telegramexpert.ru/api/stat/add/{0}/{1}'.format(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–ù–∞–ü–æ—Å—Ç–ù–æ–º–µ—Ä{0}'.format(message.text.lower()[2:])))
            for i in range(0, len(resp)):
                if message.text.lower() == f"/i{resp[i]['id']}":

                    markup = types.InlineKeyboardMarkup(True, True)
                    if resp[i]['link']:
                        link = types.InlineKeyboardButton(
                            '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É', url=resp[i]['link'])
                        markup.add(link)
                    if resp[i]['linkForChat']:
                        linkForChat = types.InlineKeyboardButton(
                            '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç', url=resp[i]['linkForChat'])
                        markup.add(linkForChat)
                    if resp[i]['linkRegistr']:
                        linkRegistr = types.InlineKeyboardButton(
                            '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', url=resp[i]['linkRegistr'])
                        markup.add(linkRegistr)

                    photo = ''
                    if resp[i]['photo']:
                        photo = fmt.hide_link(
                            'https://telegramexpert.ru{0}'.format(resp[i]['photo']))

                    if resp[i]['costType'] == 0:
                        cost = str(resp[i]['cost']) + \
                            ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
                    elif resp[i]['costType'] == 1:
                        cost = '–î–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ' + \
                            str(resp[i]['cost']) + \
                            ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
                    elif resp[i]['costType'] == 2:
                        cost = f"–î–æ–Ω–∞—Ç (–ª—é–±–∞—è –∫—É–ø—é—Ä–∞ –º–∏–Ω: {resp[i]['cost']} —Ä.) "

                    humans = ''
                    for k in range(0, len(resp[i]['human'])):
                        humans += '{0}'.format(resp[i]['human'][k]['name'])
                        if not k == (len(resp[i]['human']) - 1):
                            humans += ', '

                    await message.answer(
                        f"{photo}"
                        f"<b>{resp[i]['title']}</b> \n\n"
                        f"{resp[i]['describe']} \n"
                        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {resp[i]['location']} \n\n"
                        f"–ù–∞—á–∞–ª–æ:  <u>{resp[i]['timeStart'].split('T')[0]} - {resp[i]['timeStart'].split('T')[1][:-1]}</u>\n"
                        f"–í—Ö–æ–¥:  <u>{resp[i]['timeEnd'].split('T')[0]} - {resp[i]['timeEnd'].split('T')[1][:-1]}</u>\n\n"
                        f"–í—ã—Å—Ç—É–ø–∞–µ—Ç: {humans} \n"
                        f"–¶–µ–Ω–∞: {cost} \n",
                        parse_mode=types.ParseMode.HTML, reply_markup=markup)

        elif message.text.lower() == '–Ω–∞ –≥–ª–∞–≤–Ω—É—é' or message.text.lower() == '–Ω–∞–∑–∞–¥':
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)
        elif message.text.lower() == '–ø–æ –≥–µ–æ':
            await state.finish()
            title = '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫ –í–∞–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: \n‚óè –ù–∞–∂–º–∏—Ç–µ üìé \n‚óè –í—ã–±–µ—Ä–∏—Ç–µ ¬´Location¬ª\n‚óè –ù–∞–∂–º–∏—Ç–µ ¬´Send my current location¬ª (–ª–æ–∫–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π).'
            await message.answer(title)
        else:
            markup = types.ReplyKeyboardMarkup(True, True)
            main = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
            markup.add(main)

            if resp:

                paidText = ''
                freeText = ''
                depositText = ''
                donationText = ''
                for i in range(0, len(resp)):
                    if resp[i]['cost'] == 0:
                        freeText = freeText + \
                            f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                    else:
                        if resp[i]['costType'] == 0:
                            paidText = paidText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                        if resp[i]['costType'] == 1:
                            depositText = depositText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - –¥–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {str(resp[i]['cost']) + ' —Ä.' if resp[i]['cost'] else '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"
                        if resp[i]['costType'] == 2:
                            donationText = donationText + \
                                f"\n‚óè {resp[i]['timeEnd'].split('T')[0]} <b>{resp[i]['title']}</b> <u>{resp[i]['location']}</u>\n –í—Ö–æ–¥ - –î–æ–Ω–∞—Ç (–ª—é–±–∞—è –∫—É–ø—é—Ä–∞ –º–∏–Ω: {resp[i]['cost']} —Ä.) (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i]['id']})"

                if not paidText:
                    paidText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not freeText:
                    freeText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not depositText:
                    depositText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                if not donationText:
                    donationText = '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

                mainTitle = f'<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> \n\n <u>–ü–ª–∞—Ç–Ω–æ:</u> \n {paidText} \n\n <u>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:</u> \n {freeText} \n\n <u>–î–µ–ø–æ–∑–∏—Ç:</u> \n {depositText} \n\n <u>–î–æ–Ω–∞—Ç—ã:</u> \n {donationText}'

                await message.answer(mainTitle, parse_mode=types.ParseMode.HTML, reply_markup=markup, disable_web_page_preview=True)
            else:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –ø–æ–∫–∞ —Ç–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç', reply_markup=markup)
    data = []

    @bot.message_handler(state=Game.human)
    async def send_text(message: types.Message, state: FSMContext):
        print(message.text)
        if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫':
            requests.post('https://telegramexpert.ru/api/user/idols/', json={
                "token": message.chat.id,
                "humans": data
            }
            )

            data.clear()
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)

        elif message.text == '–ù–∞–∑–∞–¥':
            await state.finish()
            markup = types.ReplyKeyboardMarkup(True, True)
            search = types.KeyboardButton('–ü–æ–∏—Å–∫ üîç')
            game = types.KeyboardButton('–ò–≥—Ä–∞ üé≤')
            setting = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å ü§ñ')
            title = '–ü—Ä–∏–≤–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å ?'
            markup.add(search, game, setting)
            await message.answer(title, reply_markup=markup)
        else:
            data.append(message.text)
            await message.answer('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫')

    @bot.message_handler(content_types=["location"])
    async def loc_handler(message):
        print(message)
        resp = requests.get('https://telegramexpert.ru/api/post/coord/{0}/{1}'.format(
            message.location.latitude, message.location.longitude)).json()
        title = f'<b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> \n'
        for i in range(0, len(resp)):
            cost = ''
            if resp[i][1]['cost'] == 0:
                cost = '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'
            else:
                if(resp[i][1]['costType'] == 0):
                    cost = str(resp[i][1]['cost']) + ' —Ä.'
                elif(resp[i][1]['costType'] == 1):
                    cost = '–î–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ ' + \
                        str(resp[i][1]['cost']) + ' —Ä.'
                else:
                    cost = '–õ—é–±–∞—è –∫—É–ø—é—Ä–∞'
            if not resp[i][0] == 99999999:
                title = title + \
                    f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{resp[i][0]} –º–µ—Ç—Ä–æ–≤</b>  \n‚óè {resp[i][1]['timeEnd'].split('T')[0]} <b>{resp[i][1]['title']}</b> <u>{resp[i][1]['location']}</u>\n –í—Ö–æ–¥ - {cost} (–ü–æ–¥—Ä–æ–±–Ω–µ–µ -> /i{resp[i][1]['id']}) \n"
        await message.answer(title, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)

    await set_commands(botInit)
    await bot.start_polling()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    task1 = loop.create_task(main())
    group = asyncio.gather(task1)
    loop.run_until_complete(group)
